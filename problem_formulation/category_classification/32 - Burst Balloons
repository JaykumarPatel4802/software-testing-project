Problem:

You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.

If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.

---

Examples:

Example 1:
Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167

Example 2:
Input: nums = [1,5]
Output: 10

---

Complete the following function with the solution.
class Solution:
    def maxCoins(self, nums: List[int]) -> int:
        
---

This problem belongs to one of the following categories: "Arrays and Hashing", "Two Pointer", "Trees", "Graphs", "Backtracking", and "DP". Your job is to tell me which category it belongs to. Don't provide me an explanation. Simply provide the category.